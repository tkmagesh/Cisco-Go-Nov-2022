Magesh Kuppan

Schedule:
    Commence    : 9:00 AM
    Tea Break   : 10:30 AM (20 mins)
    Lunch Break : 12:30 PM (1 hr)
    Tea Break   : 3:00 PM (20 mins)
    Wind up     : 5:00 PM

Methodology:
    * No powerpoints
    * 100% hands on driven

Github Repo:
    https://github.com/tkmagesh/Cisco-Go-Nov-2022

Software Requirements
    * Go tools (https://go.dev/dl)
    * Visual Studio Code (https://code.visualstudio.com)
    * Go extension for Visual Studio Clode (https://marketplace.visualstudio.com/items?itemName=golang.Go)
    * Setup the tools
        In Visual Studio Code
            Ctrl/CMD + Shift + P
            Go: Install/Update tools
            Select all the tools
            Install them


Paradox Of Choice (Barry Schwartz)

Why Go?
    * Simplicity
        Only 25 keywords
        - No access modifiers (No public, private, protected etc)
        - No classes (Only structs)
        - No inheritance (Only composition)
        - No exceptions / try catch finally (Only errors that are values)
        - No reference type (everything is a value by default)
        - No pointer arithmatic
        - No implicit type conversion
        - No compilation to intermediate language 
        - No VM (JVM / CLR)
    * Lightweight
        - Compiled to Machine Code
        - Offers tools for cross compilation
        - Performance is equivalent to C++
    * Support for concurrency
        - OS Threads are not directly used to achieve concurrency (2 MB in Linux)
        - Lightweight thread like infrastructure called "Goroutines" (4 KB)
        - Builtin Scheduler to execute the Goroutines
        - Languages features are built for concurrency
        - go keyword, channel datatype, channel operator ( <- ), range, select case
        - APIs for concurrency (sync package, sync/atomic package)

API Documentation
    - https://pkg.go.dev/std


To run a go program
    go run <file_name.go>

To create a build
    go build <file_name.go>
    
To cross compile
    GOARCH=386 GOOS=windows go build 01-hello-world.go

To list the environment variables
    go env
    go env GOOS GOARCH

To get the list of OS/Arch for cross compilation
    go tool dist list


Data Types
    bool
    string

    int
    int8
    int16
    int32
    int64

    unit
    unit8
    unit16
    unit32
    unit64

    float32
    float64

    complex64 [real (float32) + imaginary (float32)]
    complex128 [real (float64) + imaginary (float64)]

    byte (alias for uint8)
    rune (alias for int32) (unicode code point)

Constructs
    if else
    switch case
    for

Assignment-1:  
    Print all the prime numbers between 3 and 100

Assignment-2:
    Display the following menu
		1. Add
		2. Subtract
		3. Multiply
		4. Divide
		5. Exit
	Accept the user choice
	If the user choice is 1 - 4
		accept 2 numbers from the user
		perform the corresponding operation
		print the result
		display the menu again

	If the user choice = 5
		print "Thank you"
		exit the application

	If the user choice is NOT 1 - 5
		print "Invalid choice"
		display the menu again

Functions
    1. Go functions can return more than one value
    2. Go has support for variadic functions
    3. Go has support for anonymous functions
    4. Go has support for higher order functions
        functions are first class objects
        * assign functions to variables
        * pass a function as an argument
        * return a function as a return value

Assignment-03
    Refactor the solution for Assignment-02 with functions where each function has only one responsibility


Day-02 Agenda
    - pointers
    - collections (arrays, maps, slices)
    - modularity
    - structs
    - methods
    - interfaces
    - concurrency

Collections
    Array
        Fixed size collection of data of the same type

    Slices
        Varying size collection of data of the same type
        - append fn
    Maps